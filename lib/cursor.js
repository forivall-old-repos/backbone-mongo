// Generated by CoffeeScript 1.7.1

/*
  backbone-mongo.js 0.6.3
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-mongo
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var ARRAY_QUERIES, MongoCursor, sync, _, _adaptIds, _ref, _sortArgsToMongo,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('backbone-orm'), _ = _ref._, sync = _ref.sync;

  ARRAY_QUERIES = ['$or', '$nor', '$and'];

  _sortArgsToMongo = function(args, backbone_adapter) {
    var key, sort_part, sorters, value, _i, _len;
    args = _.isArray(args) ? args : [args];
    sorters = {};
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      sort_part = args[_i];
      key = sort_part.trim();
      value = 1;
      if (key[0] === '-') {
        key = key.substring(1).trim();
        value = -1;
      }
      sorters[key === 'id' ? backbone_adapter.id_attribute : key] = value;
    }
    return sorters;
  };

  _adaptIds = function(query, backbone_adapter, is_id) {
    var key, result, value;
    if (_.isDate(query) || _.isRegExp(query)) {
      return query;
    }
    if (_.isArray(query)) {
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = query.length; _i < _len; _i++) {
          value = query[_i];
          _results.push(_adaptIds(value, backbone_adapter, is_id));
        }
        return _results;
      })();
    }
    if (_.isObject(query)) {
      result = {};
      for (key in query) {
        value = query[key];
        result[key === 'id' ? backbone_adapter.id_attribute : key] = _adaptIds(value, backbone_adapter, is_id || key === 'id');
      }
      return result;
    }
    if (is_id) {
      return backbone_adapter.findId(query);
    }
    return query;
  };

  module.exports = MongoCursor = (function(_super) {
    __extends(MongoCursor, _super);

    function MongoCursor() {
      this._aggregateCursor = __bind(this._aggregateCursor, this);
      return MongoCursor.__super__.constructor.apply(this, arguments);
    }

    MongoCursor.prototype._queryToMongoCursor = function(callback) {
      return this.buildFindQuery((function(_this) {
        return function(err, find_query) {
          var $fields, args, key, mongo_query, _i, _len;
          if (err) {
            return callback(err);
          }
          mongo_query = _adaptIds(find_query, _this.backbone_adapter);
          if (_this._cursor.$ids) {
            mongo_query[_this.backbone_adapter.id_attribute] = {
              $in: _adaptIds(_this._cursor.$ids, _this.backbone_adapter, true)
            };
          }
          for (_i = 0, _len = ARRAY_QUERIES.length; _i < _len; _i++) {
            key = ARRAY_QUERIES[_i];
            if (_this._cursor[key]) {
              mongo_query[key] = _adaptIds(_this._cursor[key], _this.backbone_adapter);
            }
          }
          if (_this._cursor.$values) {
            $fields = _this._cursor.$white_list ? _.intersection(_this._cursor.$values, _this._cursor.$white_list) : _this._cursor.$values;
          } else if (_this._cursor.$select) {
            $fields = _this._cursor.$white_list ? _.intersection(_this._cursor.$select, _this._cursor.$white_list) : _this._cursor.$select;
          } else if (_this._cursor.$white_list) {
            $fields = _this._cursor.$white_list;
          }
          if (_this._cursor.$unique) {
            return _this._aggregateCursor(mongo_query, $fields, callback);
          }
          args = [mongo_query];
          if ($fields) {
            args.push($fields);
          }
          args.push(function(err, cursor) {
            if (err) {
              return callback(err);
            }
            if (_this._cursor.$sort) {
              if (!_.isArray(_this._cursor.$sort)) {
                _this._cursor.$sort = [_this._cursor.$sort];
              }
              cursor = cursor.sort(_sortArgsToMongo(_this._cursor.$sort, _this.backbone_adapter));
            }
            if (_this._cursor.$offset) {
              cursor = cursor.skip(_this._cursor.$offset);
            }
            if (_this._cursor.$one || _this.hasCursorQuery('$exists')) {
              cursor = cursor.limit(1);
            } else if (_this._cursor.$limit) {
              cursor = cursor.limit(_this._cursor.$limit);
            }
            return callback(null, cursor);
          });
          return _this.connection.collection(function(err, collection) {
            if (err) {
              return callback(err);
            }
            return collection.find.apply(collection, args);
          });
        };
      })(this));
    };

    MongoCursor.prototype.queryToJSON = function(callback) {
      if (this.hasCursorQuery('$zero')) {
        return callback(null, this.hasCursorQuery('$one') ? null : []);
      }
      return this._queryToMongoCursor((function(_this) {
        return function(err, cursor) {
          var aggregate_cursor;
          if (err) {
            return callback(err);
          }
          if ((aggregate_cursor = cursor.aggregate_cursor)) {
            return _this._aggregateMongoCursorToJSON(aggregate_cursor, callback);
          }
          if (_this.hasCursorQuery('$count')) {
            return cursor.count(callback);
          }
          if (_this.hasCursorQuery('$exists')) {
            return cursor.count(function(err, count) {
              return callback(err, !!count);
            });
          }
          return cursor.toArray(function(err, docs) {
            var json;
            if (err) {
              return callback(err);
            }
            json = _.map(docs, function(doc) {
              return _this.backbone_adapter.nativeToAttributes(doc);
            });
            return _this.fetchIncludes(json, function(err) {
              if (err) {
                return callback(err);
              }
              if (_this.hasCursorQuery('$page')) {
                return cursor.count(function(err, count) {
                  if (err) {
                    return callback(err);
                  }
                  return callback(null, {
                    offset: _this._cursor.$offset || 0,
                    total_rows: count,
                    rows: _this.selectResults(json)
                  });
                });
              } else {
                return callback(null, _this.selectResults(json));
              }
            });
          });
        };
      })(this));
    };

    MongoCursor.prototype._aggregateCursor = function(match, $fields, callback) {
      return this.connection.collection((function(_this) {
        return function(err, collection) {
          var cursor_options, fetch, field, group_args, group_id_args, pipeline, sort, _i, _j, _len, _len1, _ref1, _ref2;
          if (err) {
            return callback(err);
          }
          pipeline = [];
          pipeline.push({
            $match: match
          });
          if (_this._cursor.$sort) {
            if (!_.isArray(_this._cursor.$sort)) {
              _this._cursor.$sort = [_this._cursor.$sort];
            }
            sort = {
              $sort: _sortArgsToMongo(_this._cursor.$sort, _this.backbone_adapter)
            };
            pipeline.push(sort);
          }
          group_id_args = {};
          _ref1 = _this._cursor.$unique;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            field = _ref1[_i];
            group_id_args[field] = "$" + field;
          }
          group_args = {
            _id: group_id_args
          };
          $fields = ($fields || []).concat(_this._cursor.$unique);
          $fields = _.without($fields, '_id');
          for (_j = 0, _len1 = $fields.length; _j < _len1; _j++) {
            field = $fields[_j];
            group_args[field] = {
              $first: "$" + field
            };
          }
          group_args.__id = {
            $first: "$" + _this.backbone_adapter.id_attribute
          };
          pipeline.push({
            $group: group_args
          });
          if (sort) {
            pipeline.push(sort);
          }
          if (_this._cursor.$one || _this.hasCursorQuery('$exists')) {
            pipeline.push({
              $limit: 1
            });
          } else if (_this._cursor.$limit) {
            pipeline.push({
              $limit: _this._cursor.$limit
            });
          }
          if (_this._cursor.$offset) {
            pipeline.push({
              $skip: _this._cursor.$offset
            });
          }
          if (_this._cursor.$count) {
            pipeline.push({
              $group: {
                _id: null,
                count: {
                  $sum: 1
                }
              }
            });
          }
          cursor_options = {};
          if ((fetch = (_ref2 = _this._cursor.$each) != null ? _ref2.fetch : void 0)) {
            cursor_options.batchSize = fetch;
          }
          return callback(null, {
            aggregate_cursor: collection.aggregate(pipeline, {
              cursor: cursor_options
            })
          });
        };
      })(this));
    };

    MongoCursor.prototype._aggregateMongoCursorToJSON = function(aggregate_cursor, callback) {
      return aggregate_cursor.get((function(_this) {
        return function(err, results) {
          var result, _i, _len;
          if (err) {
            return callback(err);
          }
          if (_this._cursor.$count) {
            return callback(null, results[0].count);
          }
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            result = results[_i];
            result.id = result.__id.toString();
            delete result._id;
            delete result.__id;
          }
          return callback(null, _this.selectResults(results));
        };
      })(this));
    };

    return MongoCursor;

  })(sync.Cursor);

}).call(this);
