// Generated by CoffeeScript 1.7.1

/*
  backbone-mongo.js 0.6.0
  Copyright (c) 2013-2014 Vidigami
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
  Source: https://github.com/vidigami/backbone-orm
  Dependencies: Backbone.js and Underscore.js.
 */

(function() {
  var CacheCursor, modelEach, _, _ref;

  _ref = require('backbone-orm'), _ = _ref._, CacheCursor = _ref.CacheCursor;

  modelEach = require('./model_each');

  module.exports = function(model_type) {
    var bypassCursorFactory, cache_cursor, cursorFactory, is_cache, modelEachCache, origEach;
    cache_cursor = is_cache = null;
    modelEachCache = function(query, iterator, callback) {
      var options;
      cache_cursor || (cache_cursor = model_type.cursor());
      is_cache || (is_cache = cache_cursor instanceof CacheCursor);
      if (!is_cache) {
        return modelEach(cursorFactory, query, iterator, callback);
      }
      options = query.$each || {};
      if (options.cache === false || options.json) {
        return modelEach(bypassCursorFactory, query, iterator, callback);
      }
      return origEach(query, iterator, callback);
    };
    bypassCursorFactory = function(query) {
      return cache_cursor.wrapped_sync_fn('cursor', parsed_query);
    };
    cursorFactory = function(query) {
      return model_type.cursor(parsed_query);
    };
    origEach = model_type.each;
    model_type.each = function(query, iterator, callback) {
      var _ref1;
      if (arguments.length === 2) {
        _ref1 = [{}, query, iterator], query = _ref1[0], iterator = _ref1[1], callback = _ref1[2];
      }
      return modelEachCache(query, iterator, callback);
    };
    return model_type.eachC = function(query, callback, iterator) {
      var _ref1;
      if (arguments.length === 2) {
        _ref1 = [{}, query, callback], query = _ref1[0], callback = _ref1[1], iterator = _ref1[2];
      }
      return modelEachCache(model_type, query, iterator, callback);
    };
  };

}).call(this);
